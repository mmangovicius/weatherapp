apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.marius.mango.weatherapp"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ['-Xjvm-default=compatibility']
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:${versions.coreKtx}"
    implementation "androidx.appcompat:appcompat:${versions.appCompat}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation("io.coil-kt:coil:${versions.coil}")

    api "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation "org.koin:koin-androidx-viewmodel:${versions.koin}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:${versions.kotlinxserialization}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.serializationruntime}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "com.squareup.moshi:moshi:${versions.moshi}"
    implementation "com.squareup.moshi:moshi-adapters:${versions.moshi}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    api "org.junit.jupiter:junit-jupiter-api:${versions.junitJupiter}"
    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junitJupiter}"
    api "org.junit.jupiter:junit-jupiter-params:${versions.junitJupiter}"
    api "com.google.truth:truth:${versions.truth}"
    api "androidx.arch.core:core-testing:${versions.archCore}"
    api "org.mockito:mockito-inline:${versions.mockito}"
    api "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}"
    api "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "io.mockk:mockk:${versions.mockk}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
}